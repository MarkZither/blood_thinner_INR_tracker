@inherits LayoutComponentBase
@rendermode InteractiveServer

<MudThemeProvider />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<!-- Navigation Header -->
<nav class="navbar navbar-expand-lg navbar-dark bg-primary fixed-top shadow">
    <div class="container-fluid">
        <a class="navbar-brand fw-bold" href="/">
            <i class="fas fa-heartbeat me-2"></i>
            Blood Thinner Tracker
        </a>
        
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" 
                data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false">
            <span class="navbar-toggler-icon"></span>
        </button>
        
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/">
                        <i class="fas fa-tachometer-alt me-1"></i>
                        Dashboard
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/inr">
                        <i class="fas fa-chart-line me-1"></i>
                        INR Tracking
                    </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/medications">
                        <i class="fas fa-pills me-1"></i>
                        Medication Log
                    </a>
                </li>
                <li class="nav-item dropdown">
                    <a class="nav-link dropdown-toggle" href="#" role="button" 
                       data-bs-toggle="dropdown" aria-expanded="false">
                        <i class="fas fa-chart-bar me-1"></i>
                        Reports
                    </a>
                    <ul class="dropdown-menu">
                        <li><a class="dropdown-item" href="/reports/inr-trends">
                            <i class="fas fa-line-chart me-2"></i>INR Trends
                        </a></li>
                        <li><a class="dropdown-item" href="/reports/medication-adherence">
                            <i class="fas fa-check-circle me-2"></i>Medication Adherence
                        </a></li>
                        <li><hr class="dropdown-divider"></li>
                        <li><a class="dropdown-item" href="/reports/export">
                            <i class="fas fa-download me-2"></i>Export Data
                        </a></li>
                    </ul>
                </li>
            </ul>
            
            <div class="d-flex">
                <!-- Notifications -->
                <MudIconButton Icon="@Icons.Material.Filled.Notifications" 
                               Color="Color.Inherit" 
                               Style="color: white;"
                               Edge="Edge.End"
                               Class="me-2"
                               OnClick="@(() => notificationsOpen = true)">
                    <MudBadge Content="3" Color="Color.Error" Overlap="true">
                        <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" />
                    </MudBadge>
                </MudIconButton>
                
                <!-- User Menu (MudBlazor) -->
                <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                    <ActivatorContent>
                        <MudButton Variant="Variant.Outlined" 
                                   Color="Color.Default" 
                                   StartIcon="@Icons.Material.Filled.AccountCircle"
                                   Style="color: white; border-color: white;">
                            @(userName ?? "User")
                        </MudButton>
                    </ActivatorContent>
                    <ChildContent>
                        <MudMenuItem Href="/profile" Icon="@Icons.Material.Filled.Person">
                            Profile
                        </MudMenuItem>
                        <MudMenuItem Href="/profile" Icon="@Icons.Material.Filled.Settings">
                            Settings
                        </MudMenuItem>
                        <MudDivider />
                        <MudMenuItem Href="/help" Icon="@Icons.Material.Filled.Help">
                            Help & Support
                        </MudMenuItem>
                        <MudDivider />
                        <MudMenuItem Href="/logout" 
                                     Icon="@Icons.Material.Filled.Logout"
                                     IconColor="Color.Error">
                            <span style="color: var(--mud-palette-error);">Logout</span>
                        </MudMenuItem>
                    </ChildContent>
                </MudMenu>
            </div>
        </div>
    </div>
</nav>

<!-- Notifications Offcanvas -->
<MudDrawer @bind-Open="@notificationsOpen" 
           Anchor="Anchor.Right" 
           Elevation="1" 
           Variant="@DrawerVariant.Temporary">
    <MudDrawerHeader Class="mud-theme-primary">
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Notifications" Class="me-2" />
            Notifications
        </MudText>
    </MudDrawerHeader>
    <MudDivider />
    <MudList T="string">
        <MudListItem T="string" Icon="@Icons.Material.Filled.Warning" IconColor="Color.Warning">
            <MudText Typo="Typo.subtitle2" Class="mb-1">INR Result Out of Range</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Your latest INR of 3.5 is above target range.</MudText>
            <MudText Typo="Typo.caption" Color="Color.Secondary">2 hours ago</MudText>
        </MudListItem>
        <MudDivider />
        <MudListItem T="string" Icon="@Icons.Material.Filled.Medication" IconColor="Color.Info">
            <MudText Typo="Typo.subtitle2" Class="mb-1">Medication Reminder</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Time to take your evening Warfarin dose.</MudText>
            <MudText Typo="Typo.caption" Color="Color.Secondary">1 hour ago</MudText>
        </MudListItem>
        <MudDivider />
        <MudListItem T="string" Icon="@Icons.Material.Filled.CheckCircle" IconColor="Color.Success">
            <MudText Typo="Typo.subtitle2" Class="mb-1">INR Test Scheduled</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Your next INR test is scheduled for tomorrow at 9:00 AM.</MudText>
            <MudText Typo="Typo.caption" Color="Color.Secondary">3 hours ago</MudText>
        </MudListItem>
    </MudList>
    <div class="d-flex justify-content-center pa-3">
        <MudButton Variant="Variant.Outlined" 
                   Color="Color.Primary" 
                   Href="/notifications"
                   FullWidth="true">
            View All Notifications
        </MudButton>
    </div>
</MudDrawer>

<!-- Main Content -->
<main class="main-content">
    @Body
</main>

<!-- Footer -->
<footer class="footer bg-light border-top mt-5">
    <div class="container py-4">
        <div class="row">
            <div class="col-md-6">
                <h6 class="fw-bold text-primary">
                    <i class="fas fa-heartbeat me-2"></i>
                    Blood Thinner Tracker
                </h6>
                <p class="text-muted small mb-0">
                    Your personal medication and INR tracking companion.
                </p>
            </div>
            <div class="col-md-6 text-md-end">
                <div class="mb-2">
                    <a href="/privacy" class="text-decoration-none me-3">Privacy Policy</a>
                    <a href="/terms" class="text-decoration-none me-3">Terms of Service</a>
                    <a href="/help" class="text-decoration-none">Support</a>
                </div>
                <p class="text-muted small mb-0">
                    <i class="fas fa-shield-alt me-1"></i>
                    Your medical data is secure and private.
                </p>
            </div>
        </div>
        
        <hr class="my-3">
        
        <div class="text-center">
            <div class="alert alert-warning alert-sm mb-0" role="alert">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>Medical Disclaimer:</strong> This application is for tracking purposes only. 
                Always consult your healthcare provider for medical decisions and treatment adjustments.
            </div>
        </div>
    </div>
</footer>

<!-- Error UI -->
<div id="blazor-error-ui" data-nosnippet>
    <div class="alert alert-danger m-3" role="alert">
        <i class="fas fa-exclamation-triangle me-2"></i>
        An unhandled error has occurred.
        <a href="." class="btn btn-outline-danger btn-sm ms-2">Reload Page</a>
        <button class="btn-close float-end" onclick="document.getElementById('blazor-error-ui').style.display='none'"></button>
    </div>
</div>

@code {
    private string? userName = "User";
    private bool notificationsOpen = false;
    
    [Inject]
    private HttpClient? Http { get; set; }
    
    [Inject]
    private AuthenticationStateProvider? AuthStateProvider { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
    }
    
    private async Task LoadUserProfile()
    {
        try
        {
            if (Http != null && AuthStateProvider != null)
            {
                var authState = await AuthStateProvider.GetAuthenticationStateAsync();
                var user = authState.User;
                
                if (user.Identity?.IsAuthenticated == true)
                {
                    // Try to get name from claims first
                    var nameClaim = user.FindFirst(System.Security.Claims.ClaimTypes.Name) 
                                 ?? user.FindFirst("name")
                                 ?? user.FindFirst(System.Security.Claims.ClaimTypes.Email);
                    
                    if (nameClaim != null)
                    {
                        userName = nameClaim.Value;
                    }
                    else
                    {
                        // If no claim, try to load from API
                        try
                        {
                            var profile = await Http.GetFromJsonAsync<UserProfileResponse>("api/users/profile");
                            if (profile != null)
                            {
                                userName = !string.IsNullOrEmpty(profile.FullName) 
                                    ? profile.FullName 
                                    : profile.Email;
                            }
                        }
                        catch
                        {
                            // API call failed, keep default "User"
                        }
                    }
                }
            }
        }
        catch
        {
            // Error loading profile, keep default
            userName = "User";
        }
    }
    
    // Temporary model until we create the actual one
    private class UserProfileResponse
    {
        public string? FullName { get; set; }
        public string? Email { get; set; }
    }
}

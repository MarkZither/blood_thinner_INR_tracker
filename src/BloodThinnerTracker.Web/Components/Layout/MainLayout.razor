@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<MudThemeProvider Theme="CustomTheme.Theme" @bind-IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudBreakpointProvider OnBreakpointChanged="OnBreakpointChanged" />

<MudLayout>
    <MudAppBar Elevation="1" Dense="@_isMobile">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@ToggleDrawer" />
        <MudText Typo="Typo.h6" Class="ml-3">
            <MudIcon Icon="@Icons.Material.Filled.Favorite" Size="Size.Small" Class="mr-1" />
            Blood Thinner Tracker
        </MudText>
        <MudSpacer />
        
        <MudIconButton Icon="@Icons.Material.Filled.Notifications" Color="Color.Inherit" OnClick="@ToggleNotifications">
            <MudBadge Content="@_notificationCount" Color="Color.Error" Overlap="true" Visible="@(_notificationCount > 0)">
            </MudBadge>
        </MudIconButton>
        
        @if (!_isMobile)
        {
            <MudIconButton Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)" 
                           Color="Color.Inherit" 
                           OnClick="@ToggleDarkMode" />
            
            <MudMenu AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
                <ActivatorContent>
                    <MudButton Variant="Variant.Outlined" Color="Color.Default" StartIcon="@Icons.Material.Filled.AccountCircle" Style="color: white; border-color: white;">
                        @_userName
                    </MudButton>
                </ActivatorContent>
                <ChildContent>
                    <MudMenuItem Href="/profile" Icon="@Icons.Material.Filled.Person">Profile</MudMenuItem>
                    <MudMenuItem Href="/profile" Icon="@Icons.Material.Filled.Settings">Settings</MudMenuItem>
                    <MudDivider />
                    <MudMenuItem Href="/help" Icon="@Icons.Material.Filled.Help">Help & Support</MudMenuItem>
                    <MudDivider />
                    <MudMenuItem Href="/logout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">
                        <MudText Color="Color.Error">Logout</MudText>
                    </MudMenuItem>
                </ChildContent>
            </MudMenu>
        }
    </MudAppBar>
    
    <MudDrawer @bind-Open="@_drawerOpen" 
               Elevation="2" 
               Variant="@(_isMobile ? DrawerVariant.Temporary : DrawerVariant.Responsive)"
               ClipMode="@(_isMobile ? DrawerClipMode.Never : DrawerClipMode.Always)">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6" Color="Color.Primary">
                <MudIcon Icon="@Icons.Material.Filled.Favorite" Class="mr-2" />
                Navigation
            </MudText>
        </MudDrawerHeader>
        <MudNavMenu>
            <MudNavLink Href="/dashboard" Icon="@Icons.Material.Filled.Dashboard" Match="NavLinkMatch.All">Dashboard</MudNavLink>
            <MudNavLink Href="/inr" Icon="@Icons.Material.Filled.ShowChart">INR Tracking</MudNavLink>
            <MudNavLink Href="/medications" Icon="@Icons.Material.Filled.Medication">Medications</MudNavLink>
            
            <MudNavGroup Title="Reports" Icon="@Icons.Material.Filled.Assessment" Expanded="false">
                <MudNavLink Href="/reports/inr-trends" Icon="@Icons.Material.Filled.TrendingUp">INR Trends</MudNavLink>
                <MudNavLink Href="/reports/medication-adherence" Icon="@Icons.Material.Filled.CheckCircle">Medication Adherence</MudNavLink>
                <MudDivider Class="my-2" />
                <MudNavLink Href="/reports/export" Icon="@Icons.Material.Filled.Download">Export Data</MudNavLink>
            </MudNavGroup>
            
            @if (_isMobile)
            {
                <MudDivider Class="my-3" />
                <MudNavLink Href="/profile" Icon="@Icons.Material.Filled.Person">Profile</MudNavLink>
                <MudNavLink Href="/help" Icon="@Icons.Material.Filled.Help">Help</MudNavLink>
                <MudNavLink OnClick="@ToggleDarkMode" Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)">
                    @(_isDarkMode ? "Light Mode" : "Dark Mode")
                </MudNavLink>
                <MudNavLink Href="/logout" Icon="@Icons.Material.Filled.Logout" IconColor="Color.Error">
                    <MudText Color="Color.Error">Logout</MudText>
                </MudNavLink>
            }
        </MudNavMenu>
        
        <MudSpacer />
        
        <div class="pa-4">
            <MudAlert Severity="Severity.Warning" Dense="true" Class="mb-2">
                <MudText Typo="Typo.caption">
                    <strong>Medical Disclaimer:</strong> For tracking purposes only.
                </MudText>
            </MudAlert>
            <MudText Typo="Typo.caption" Color="Color.Secondary" Align="Align.Center">
                Â© 2025 Blood Thinner Tracker
            </MudText>
        </div>
    </MudDrawer>
    
    <MudDrawer @bind-Open="@_notificationsOpen" Anchor="Anchor.Right" Elevation="2" Variant="@DrawerVariant.Temporary">
        <MudDrawerHeader Class="mud-theme-primary">
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@Icons.Material.Filled.Notifications" Class="mr-2" />
                Notifications
            </MudText>
        </MudDrawerHeader>
        <MudDivider />
        
        @if (_notifications.Any())
        {
            <MudList T="string">
                @foreach (var notification in _notifications)
                {
                    <MudListItem>
                        <div class="d-flex align-center">
                            <MudIcon Icon="@notification.Icon" Color="@notification.Severity" Class="mr-3" />
                            <div class="flex-grow-1">
                                <MudText Typo="Typo.subtitle2" Class="mb-1">@notification.Title</MudText>
                                <MudText Typo="Typo.body2" Color="Color.Secondary">@notification.Message</MudText>
                                <MudText Typo="Typo.caption" Color="Color.Secondary">@notification.TimeAgo</MudText>
                            </div>
                        </div>
                    </MudListItem>
                    <MudDivider />
                }
            </MudList>
        }
        else
        {
            <div class="d-flex flex-column align-center justify-center pa-8">
                <MudIcon Icon="@Icons.Material.Filled.NotificationsNone" Size="Size.Large" Color="Color.Secondary" Class="mb-4" />
                <MudText Typo="Typo.body1" Color="Color.Secondary">No notifications</MudText>
            </div>
        }
    </MudDrawer>
    
    <MudMainContent Class="@(_isMobile ? "pa-4 pb-16" : "pa-6")">
        <AuthorizeView>
            <Authorized>
                <MudAlert Severity="Severity.Warning" Class="mb-4" Dense="true">
                    <MudText Typo="Typo.body2">
                        <strong>Medical Disclaimer:</strong> This application is for informational purposes only. 
                        Always consult your healthcare provider for medical decisions.
                    </MudText>
                </MudAlert>
            </Authorized>
        </AuthorizeView>
        
        @Body
    </MudMainContent>
</MudLayout>

@if (_isMobile)
{
    <MudPaper Elevation="3" Class="fixed-bottom" Style="z-index: 1300; padding-bottom: env(safe-area-inset-bottom);">
        <MudContainer Class="d-flex justify-space-around pa-2" MaxWidth="MaxWidth.False">
            <MudIconButton Href="/dashboard" 
                           Icon="@Icons.Material.Filled.Dashboard" 
                           Color="@(IsActive("/dashboard") ? Color.Primary : Color.Default)"
                           Size="Size.Large" />
            <MudIconButton Href="/medications" 
                           Icon="@Icons.Material.Filled.Medication" 
                           Color="@(IsActive("/medications") ? Color.Primary : Color.Default)"
                           Size="Size.Large" />
            <MudIconButton Href="/inr" 
                           Icon="@Icons.Material.Filled.ShowChart" 
                           Color="@(IsActive("/inr") ? Color.Primary : Color.Default)"
                           Size="Size.Large" />
            <MudIconButton OnClick="@ToggleDrawer" 
                           Icon="@Icons.Material.Filled.Menu" 
                           Color="Color.Default"
                           Size="Size.Large" />
        </MudContainer>
    </MudPaper>
}

@code {
    private bool _drawerOpen = true;
    private bool _notificationsOpen = false;
    private bool _isDarkMode = false;
    private bool _isMobile = false;
    private string _userName = "User";
    private int _notificationCount = 3;
    private List<NotificationItem> _notifications = new();
    
    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
        LoadNotifications();
    }
    
    private void OnBreakpointChanged(Breakpoint breakpoint)
    {
        // MudBlazor breakpoints: Xs (0-600px), Sm (600-960px), Md (960-1280px), Lg (1280-1920px), Xl (1920px+)
        _isMobile = breakpoint == Breakpoint.Xs || breakpoint == Breakpoint.Sm;
        InvokeAsync(StateHasChanged);
    }
    
    private async Task LoadUserProfile()
    {
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (user.Identity?.IsAuthenticated == true)
            {
                var nameClaim = user.FindFirst(System.Security.Claims.ClaimTypes.Name) 
                             ?? user.FindFirst("name")
                             ?? user.FindFirst(System.Security.Claims.ClaimTypes.Email);
                
                _userName = nameClaim?.Value ?? "User";
            }
        }
        catch
        {
            _userName = "User";
        }
    }
    
    private void LoadNotifications()
    {
        _notifications = new List<NotificationItem>
        {
            new()
            {
                Icon = Icons.Material.Filled.Warning,
                Severity = Color.Warning,
                Title = "INR Result Out of Range",
                Message = "Your latest INR of 3.5 is above target range.",
                TimeAgo = "2 hours ago"
            },
            new()
            {
                Icon = Icons.Material.Filled.Medication,
                Severity = Color.Info,
                Title = "Medication Reminder",
                Message = "Time to take your evening Warfarin dose.",
                TimeAgo = "1 hour ago"
            },
            new()
            {
                Icon = Icons.Material.Filled.CheckCircle,
                Severity = Color.Success,
                Title = "INR Test Scheduled",
                Message = "Your next INR test is scheduled for tomorrow.",
                TimeAgo = "3 hours ago"
            }
        };
        _notificationCount = _notifications.Count;
    }
    
    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;
    private void ToggleNotifications() => _notificationsOpen = !_notificationsOpen;
    private void ToggleDarkMode() => _isDarkMode = !_isDarkMode;
    
    private bool IsActive(string href)
    {
        var currentPath = new Uri(NavigationManager.Uri).AbsolutePath;
        return currentPath.StartsWith(href, StringComparison.OrdinalIgnoreCase);
    }
    
    private class NotificationItem
    {
        public string Icon { get; set; } = string.Empty;
        public Color Severity { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public string TimeAgo { get; set; } = string.Empty;
    }
}

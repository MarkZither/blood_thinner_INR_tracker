@page "/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using BloodThinnerTracker.Web.Services
@using MudBlazor
@inject NavigationManager Navigation
@inject ILogger<Login> Logger
@inject AuthenticationStateProvider AuthStateProvider
@inject CustomAuthenticationStateProvider CustomAuthStateProvider

<PageTitle>Login - Blood Thinner Tracker</PageTitle>

<MudContainer MaxWidth="MaxWidth.Small" Style="min-height: 100vh; display: flex; align-items: center; justify-content: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
    <MudPaper Elevation="8" Class="pa-6" Style="border-radius: 16px; max-width: 450px; width: 100%;">
        <div class="d-flex flex-column align-center mb-6">
            <MudIcon Icon="@Icons.Material.Filled.Favorite" Color="Color.Primary" Style="font-size: 4rem;" Class="mb-2" />
            <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary">Blood Thinner Tracker</MudText>
            <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary">Secure Medical Login</MudText>
        </div>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <MudAlert Severity="Severity.Error" Class="mb-4" CloseIcon="@Icons.Material.Filled.Close" CloseIconClicked="@(() => _errorMessage = string.Empty)">
                @_errorMessage
            </MudAlert>
        }

        <MudText Typo="Typo.h6" Align="Align.Center" Class="mb-2">Sign in to your account</MudText>
        <MudText Typo="Typo.body2" Align="Align.Center" Color="Color.Secondary" Class="mb-6">
            Choose your preferred login method
        </MudText>

        <MudStack Spacing="3">
            <MudButton Href="/Auth/LoginMicrosoft"
                       Variant="Variant.Outlined"
                       Color="Color.Primary"
                       FullWidth="true"
                       Size="Size.Large"
                       StartIcon="@Icons.Material.Filled.Login">
                Sign in with Microsoft
            </MudButton>

            <MudButton Href="/Auth/LoginGoogle"
                       Variant="Variant.Outlined"
                       Color="Color.Error"
                       FullWidth="true"
                       Size="Size.Large"
                       StartIcon="@Icons.Material.Filled.Login">
                Sign in with Google
            </MudButton>
        </MudStack>

        <MudDivider Class="my-6" />

        <MudStack Row="true" Justify="Justify.SpaceBetween">
            <MudLink Href="/forgot-password" Color="Color.Primary">Forgot password?</MudLink>
            <MudLink Href="/register" Color="Color.Primary">Sign up here</MudLink>
        </MudStack>

        <MudAlert Severity="Severity.Warning" Dense="true" Class="mt-6">
            <MudText Typo="Typo.caption">
                <strong>Medical Disclaimer:</strong> This application is for tracking purposes only.
                Always consult your healthcare provider for medical decisions.
            </MudText>
        </MudAlert>
    </MudPaper>
</MudContainer>

@code {
    private string _errorMessage = string.Empty;

    [SupplyParameterFromQuery(Name = "returnUrl")]
    public string? ReturnUrl { get; set; }

    [SupplyParameterFromQuery(Name = "error")]
    public string? ErrorCode { get; set; }

    [SupplyParameterFromQuery(Name = "message")]
    public string? ErrorMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Display OAuth error if present
            if (!string.IsNullOrEmpty(ErrorCode))
            {
                _errorMessage = ErrorCode switch
                {
                    "oauth_failed" => $"Sign-in failed: {ErrorMessage ?? "Unable to complete authentication. Please try again."}",
                    "access_denied" => "You cancelled the sign-in process.",
                    _ => "An error occurred during sign-in. Please try again."
                };

                Logger.LogWarning("Login page showing error: {ErrorCode} - {Message}", ErrorCode, ErrorMessage);
            }

            // Check if user is already authenticated
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            if (authState.User.Identity?.IsAuthenticated == true)
            {
                Logger.LogInformation("Login: User already authenticated, redirecting to target");
                // Already logged in, redirect to returnUrl or dashboard
                var targetUrl = !string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/dashboard";
                Navigation.NavigateTo(targetUrl, forceLoad: true);
                return;
            }

            // Don't clear cache here - it interferes with OAuth flow
            // Let the OAuth callback handle authentication state properly
            Logger.LogInformation("Login: Showing login options");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Login: Error during initialization");
            _errorMessage = "An error occurred. Please try again.";
        }
    }
}

@page "/inr"
@using BloodThinnerTracker.Shared.Models
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@rendermode InteractiveServer

<PageTitle>INR Tracking - Blood Thinner Tracker</PageTitle>

<div class="inr-container">
    <!-- Medical Disclaimer -->
    <div class="alert alert-warning medical-disclaimer mb-4" role="alert">
        <div class="d-flex align-items-center">
            <i class="fas fa-exclamation-triangle me-2"></i>
            <div>
                <strong>Critical Medical Information:</strong> INR (International Normalized Ratio) values are crucial for blood thinner management. 
                Values outside your target range require immediate medical attention. Always consult your healthcare provider for INR interpretation and medication adjustments.
            </div>
        </div>
    </div>

    <!-- Header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h1 class="h2 mb-1">
                <i class="fas fa-chart-line text-primary me-2"></i>
                INR Tracking
            </h1>
            <p class="text-muted mb-0">Monitor your blood clotting levels and trends</p>
        </div>
        <div>
            <button class="btn btn-primary" @onclick="NavigateToAddINR">
                <i class="fas fa-plus me-1"></i>Add INR Result
            </button>
        </div>
    </div>

    <!-- Current Status Cards -->
    <div class="row mb-4">
        <div class="col-md-3">
            <div class="card stat-card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="stat-icon @GetCurrentINRStatusClass() text-white mx-auto mb-2">
                        <i class="fas fa-tachometer-alt"></i>
                    </div>
                    <h4 class="card-title mb-1">@(currentINR?.ToString("F1") ?? "N/A")</h4>
                    <p class="card-text text-muted small mb-0">Current INR</p>
                    @if (currentINRDate.HasValue)
                    {
                        <small class="text-muted">@currentINRDate.Value.ToString("MMM dd, yyyy")</small>
                    }
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card stat-card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="stat-icon bg-info text-white mx-auto mb-2">
                        <i class="fas fa-bullseye"></i>
                    </div>
                    <h4 class="card-title mb-1">@targetRange</h4>
                    <p class="card-text text-muted small mb-0">Target Range</p>
                    <small class="text-muted">Set by physician</small>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card stat-card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="stat-icon bg-success text-white mx-auto mb-2">
                        <i class="fas fa-percentage"></i>
                    </div>
                    <h4 class="card-title mb-1">@timeInRangePercentage%</h4>
                    <p class="card-text text-muted small mb-0">Time in Range</p>
                    <small class="text-muted">Last 3 months</small>
                </div>
            </div>
        </div>
        
        <div class="col-md-3">
            <div class="card stat-card border-0 shadow-sm h-100">
                <div class="card-body text-center">
                    <div class="stat-icon @GetNextTestStatusClass() text-white mx-auto mb-2">
                        <i class="fas fa-calendar-check"></i>
                    </div>
                    <h4 class="card-title mb-1">@daysUntilNextTest</h4>
                    <p class="card-text text-muted small mb-0">Days Until Next Test</p>
                    @if (nextTestDate.HasValue)
                    {
                        <small class="text-muted">@nextTestDate.Value.ToString("MMM dd, yyyy")</small>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- INR Trend Chart -->
    <MudPaper Class="pa-4 mb-4" Elevation="2">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <MudText Typo="Typo.h5">
                <MudIcon Icon="@Icons.Material.Filled.ShowChart" Class="mr-2" />
                INR Trend Analysis
            </MudText>
            <MudButtonGroup OverrideStyles="false">
                <MudButton Variant="@(chartPeriod == "3m" ? Variant.Filled : Variant.Outlined)" 
                           Color="Color.Primary" Size="Size.Small" OnClick="ChangeChartPeriod3M">3M</MudButton>
                <MudButton Variant="@(chartPeriod == "6m" ? Variant.Filled : Variant.Outlined)" 
                           Color="Color.Primary" Size="Size.Small" OnClick="ChangeChartPeriod6M">6M</MudButton>
                <MudButton Variant="@(chartPeriod == "1y" ? Variant.Filled : Variant.Outlined)" 
                           Color="Color.Primary" Size="Size.Small" OnClick="ChangeChartPeriod1Y">1Y</MudButton>
                <MudButton Variant="@(chartPeriod == "all" ? Variant.Filled : Variant.Outlined)" 
                           Color="Color.Primary" Size="Size.Small" OnClick="ChangeChartPeriodAll">All</MudButton>
            </MudButtonGroup>
        </div>
        
        @if (inrTests?.Any() == true)
        {
            <MudChart ChartType="ChartType.Line" 
                      ChartSeries="@chartSeries" 
                      XAxisLabels="@chartLabels" 
                      Width="100%" 
                      Height="400px"
                      ChartOptions="@chartOptions">
            </MudChart>
            
            <!-- Chart Legend -->
            <div class="mt-4">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" sm="6" md="3">
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Success" Size="Size.Small" Class="mr-2" />
                            <MudText Typo="Typo.body2">Target Range (@targetRange)</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Primary" Size="Size.Small" Class="mr-2" />
                            <MudText Typo="Typo.body2">INR Values</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Warning" Size="Size.Small" Class="mr-2" />
                            <MudText Typo="Typo.body2">Below Range (Risk of Clots)</MudText>
                        </div>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <div class="d-flex align-items-center">
                            <MudIcon Icon="@Icons.Material.Filled.Circle" Color="Color.Error" Size="Size.Small" Class="mr-2" />
                            <MudText Typo="Typo.body2">Above Range (Risk of Bleeding)</MudText>
                        </div>
                    </MudItem>
                </MudGrid>
            </div>
        }
        else
        {
            <div class="text-center py-5">
                <MudIcon Icon="@Icons.Material.Filled.ShowChart" Size="Size.Large" Color="Color.Default" Class="mb-3" />
                <MudText Typo="Typo.h6" Color="Color.Default">No INR Data Available</MudText>
                <MudText Typo="Typo.body1" Color="Color.Default" Class="mb-4">Start tracking your INR levels to see trends and analysis</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" 
                           StartIcon="@Icons.Material.Filled.Add" OnClick="NavigateToAddINR">
                    Add Your First INR Result
                </MudButton>
            </div>
        }
    </MudPaper>

    <!-- INR History Table -->
    <div class="card shadow-sm">
        <div class="card-header bg-white border-bottom">
            <div class="d-flex justify-content-between align-items-center">
                <h5 class="card-title mb-0">
                    <i class="fas fa-history text-primary me-2"></i>
                    INR Test History
                </h5>
                <div class="d-flex gap-2">
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ExportINRData">
                        <i class="fas fa-download me-1"></i>Export
                    </button>
                    <button class="btn btn-sm btn-primary" @onclick="NavigateToAddINR">
                        <i class="fas fa-plus me-1"></i>Add Result
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body">
            @if (inrTests?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>INR Value</th>
                                <th>Status</th>
                                <th>Laboratory</th>
                                <th>Notes</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var test in inrTests.OrderByDescending(t => t.TestDate))
                            {
                                <tr class="@GetRowClass(test.INRValue)">
                                    <td>
                                        <strong>@test.TestDate.ToString("MMM dd, yyyy")</strong>
                                        <br>
                                        <small class="text-muted">@test.TestDate.ToString("HH:mm")</small>
                                    </td>
                                    <td>
                                        <span class="inr-value @GetValueClass(test.INRValue)">
                                            @test.INRValue.ToString("F1")
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge @GetStatusBadgeClass(test.INRValue)">
                                            @GetStatusText(test.INRValue)
                                        </span>
                                    </td>
                                    <td>@(test.Laboratory ?? "Not specified")</td>
                                    <td>
                                        @if (!string.IsNullOrEmpty(test.Notes))
                                        {
                                            <span title="@test.Notes">
                                                @(test.Notes.Length > 30 ? test.Notes.Substring(0, 30) + "..." : test.Notes)
                                            </span>
                                        }
                                        else
                                        {
                                            <span class="text-muted">No notes</span>
                                        }
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button class="btn btn-outline-primary" @onclick="() => EditINRTest(test.Id)">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <button class="btn btn-outline-danger" @onclick="() => DeleteINRTest(test.Id)">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <nav aria-label="INR history pagination" class="mt-3">
                        <ul class="pagination justify-content-center">
                            <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                            </li>
                            @for (int i = 1; i <= totalPages; i++)
                            {
                                var page = i;
                                <li class="page-item @(currentPage == page ? "active" : "")">
                                    <button class="page-link" @onclick="() => ChangePage(page)">@(page)</button>
                                </li>
                            }
                            <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                                <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                            </li>
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="text-center py-4">
                    <i class="fas fa-flask text-muted fa-3x mb-3"></i>
                    <h4 class="text-muted">No INR Tests Recorded</h4>
                    <p class="text-muted mb-4">Start tracking your INR levels to monitor your blood thinner effectiveness</p>
                    <button class="btn btn-primary" @onclick="NavigateToAddINR">
                        <i class="fas fa-plus me-1"></i>Record Your First INR Test
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    // Current status data
    private decimal? currentINR = 2.3m;
    private DateTime? currentINRDate = DateTime.Today.AddDays(-5);
    private string targetRange = "2.0-3.0";
    private int timeInRangePercentage = 78;
    private DateTime? nextTestDate = DateTime.Today.AddDays(10);
    private int daysUntilNextTest = 10;

    // Chart and filtering
    private string chartPeriod = "3m";
    
    // MudBlazor Chart data
    private List<ChartSeries> chartSeries = new();
    private string[] chartLabels = Array.Empty<string>();
    private ChartOptions chartOptions = new ChartOptions();
    
    // Pagination
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalPages = 1;

    // Data
    private List<INRTest>? inrTests;

    protected override async Task OnInitializedAsync()
    {
        await LoadINRData();
        PrepareChartData();
    }

    private async Task LoadINRData()
    {
        try
        {
            // Call API to get INR tests
            var response = await Http.GetFromJsonAsync<List<INRTestResponse>>("api/inr?take=100");
            
            if (response != null && response.Any())
            {
                // Map response to INRTest entities
                inrTests = response.Select(r => new INRTest
                {
                    Id = r.Id,
                    UserId = r.UserId,
                    TestDate = r.TestDate,
                    INRValue = r.INRValue,
                    TargetINRMin = r.TargetINRMin,
                    TargetINRMax = r.TargetINRMax,
                    ProthrombinTime = r.ProthrombinTime,
                    PartialThromboplastinTime = r.PartialThromboplastinTime,
                    Laboratory = r.Laboratory,
                    OrderedBy = r.OrderedBy,
                    TestMethod = r.TestMethod,
                    IsPointOfCare = r.IsPointOfCare,
                    WasFasting = r.WasFasting,
                    LastMedicationTime = r.LastMedicationTime,
                    MedicationsTaken = r.MedicationsTaken,
                    FoodsConsumed = r.FoodsConsumed,
                    HealthConditions = r.HealthConditions,
                    Status = r.Status,
                    RecommendedActions = r.RecommendedActions,
                    DosageChanges = r.DosageChanges,
                    NextTestDate = r.NextTestDate,
                    Notes = r.Notes,
                    ReviewedByProvider = r.ReviewedByProvider,
                    ReviewedBy = r.ReviewedBy,
                    ReviewedAt = r.ReviewedAt,
                    PatientNotified = r.PatientNotified,
                    NotificationMethod = r.NotificationMethod,
                    CreatedAt = r.CreatedAt,
                    UpdatedAt = r.UpdatedAt ?? r.CreatedAt
                }).ToList();

                // Update current status from latest test
                var latestTest = inrTests.OrderByDescending(t => t.TestDate).FirstOrDefault();
                if (latestTest != null)
                {
                    currentINR = latestTest.INRValue;
                    currentINRDate = latestTest.TestDate;
                    
                    if (latestTest.TargetINRMin.HasValue && latestTest.TargetINRMax.HasValue)
                    {
                        targetRange = $"{latestTest.TargetINRMin:F1}-{latestTest.TargetINRMax:F1}";
                    }
                    
                    nextTestDate = latestTest.NextTestDate;
                    if (nextTestDate.HasValue)
                    {
                        daysUntilNextTest = (nextTestDate.Value - DateTime.Today).Days;
                    }
                }

                // Calculate time in range percentage (last 90 days)
                var threeMonthsAgo = DateTime.Today.AddDays(-90);
                var recentTests = inrTests.Where(t => t.TestDate >= threeMonthsAgo).ToList();
                if (recentTests.Any())
                {
                    var inRangeCount = recentTests.Count(t => t.Status == INRResultStatus.InRange);
                    timeInRangePercentage = (int)Math.Round((double)inRangeCount / recentTests.Count * 100);
                }
            }
            else
            {
                inrTests = new List<INRTest>();
            }

            // Calculate pagination
            var totalItems = inrTests?.Count ?? 0;
            totalPages = (int)Math.Ceiling((double)totalItems / pageSize);
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Network error loading INR data: {ex.Message}", Severity.Error);
            inrTests = new List<INRTest>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading INR data: {ex.Message}", Severity.Error);
            inrTests = new List<INRTest>();
        }
    }

    private void PrepareChartData()
    {
        if (inrTests?.Any() != true)
        {
            chartSeries = new List<ChartSeries>();
            chartLabels = Array.Empty<string>();
            return;
        }

        // Filter data based on selected period
        var filteredTests = FilterTestsByPeriod(inrTests, chartPeriod);
        var orderedTests = filteredTests.OrderBy(t => t.TestDate).ToList();

        // Prepare chart labels (dates)
        chartLabels = orderedTests.Select(t => t.TestDate.ToString("MMM dd")).ToArray();

        // INR Values series
        var inrValues = orderedTests.Select(t => (double)t.INRValue).ToArray();
        
        // Target range series (min and max)
        var targetMin = Enumerable.Repeat(2.0, orderedTests.Count).ToArray();
        var targetMax = Enumerable.Repeat(3.0, orderedTests.Count).ToArray();

        chartSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "INR Value", Data = inrValues },
            new ChartSeries { Name = "Target Min (2.0)", Data = targetMin },
            new ChartSeries { Name = "Target Max (3.0)", Data = targetMax }
        };

        // Configure chart options
        chartOptions = new ChartOptions
        {
            YAxisTicks = 1,
            YAxisLines = true,
            XAxisLines = true
        };
    }

    private List<INRTest> FilterTestsByPeriod(List<INRTest> tests, string period)
    {
        var cutoffDate = period switch
        {
            "3m" => DateTime.Today.AddMonths(-3),
            "6m" => DateTime.Today.AddMonths(-6),
            "1y" => DateTime.Today.AddYears(-1),
            _ => DateTime.MinValue
        };

        return tests.Where(t => t.TestDate >= cutoffDate).ToList();
    }

    private void ChangeChartPeriod(string period)
    {
        chartPeriod = period;
        PrepareChartData();
        StateHasChanged();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void EditINRTest(string testId)
    {
        Navigation.NavigateTo($"/inr/edit/{testId}");
    }

    private void NavigateToAddINR()
    {
        Navigation.NavigateTo("/inr/add");
    }

    // Chart period methods
    private void ChangeChartPeriod3M() => ChangeChartPeriod("3m");
    private void ChangeChartPeriod6M() => ChangeChartPeriod("6m");
    private void ChangeChartPeriod1Y() => ChangeChartPeriod("1y");
    private void ChangeChartPeriodAll() => ChangeChartPeriod("all");

    private async Task DeleteINRTest(string testId)
    {
        // Show MudBlazor confirmation dialog
        var result = await DialogService.ShowMessageBox(
            "Delete INR Test",
            "Are you sure you want to delete this test result? This action cannot be undone.",
            yesText: "Delete", 
            cancelText: "Cancel");
        
        if (result == true)
        {
            try
            {
                // Call API to delete test
                var response = await Http.DeleteAsync($"api/inr/{testId}");
                
                if (response.IsSuccessStatusCode)
                {
                    Snackbar.Add("INR test deleted successfully", Severity.Success);
                    await LoadINRData();
                    PrepareChartData();
                    StateHasChanged();
                }
                else
                {
                    var errorMessage = await response.Content.ReadAsStringAsync();
                    Snackbar.Add($"Failed to delete test: {errorMessage}", Severity.Error);
                }
            }
            catch (HttpRequestException ex)
            {
                Snackbar.Add($"Network error deleting test: {ex.Message}", Severity.Error);
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting test: {ex.Message}", Severity.Error);
            }
        }
    }

    private void ExportINRData()
    {
        // TODO: Implement export functionality using MudBlazor dialog
        // For now, user will see the button but export will be implemented with API
    }

    // Helper methods for styling
    private string GetCurrentINRStatusClass()
    {
        if (currentINR == null) return "bg-secondary";
        return (currentINR >= 2.0m && currentINR <= 3.0m) ? "bg-success" : 
               (currentINR < 2.0m) ? "bg-warning" : "bg-danger";
    }

    private string GetNextTestStatusClass()
    {
        return daysUntilNextTest <= 3 ? "bg-warning" : 
               daysUntilNextTest <= 7 ? "bg-info" : "bg-primary";
    }

    private string GetRowClass(decimal inrValue)
    {
        if (inrValue < 2.0m) return "table-warning";
        if (inrValue > 3.0m) return "table-danger";
        return "";
    }

    private string GetValueClass(decimal inrValue)
    {
        if (inrValue < 2.0m) return "text-warning fw-bold";
        if (inrValue > 3.0m) return "text-danger fw-bold";
        return "text-success fw-bold";
    }

    private string GetStatusBadgeClass(decimal inrValue)
    {
        if (inrValue < 2.0m) return "bg-warning";
        if (inrValue > 3.0m) return "bg-danger";
        return "bg-success";
    }

    private string GetStatusText(decimal inrValue)
    {
        if (inrValue < 2.0m) return "Below Range";
        if (inrValue > 3.0m) return "Above Range";
        return "In Range";
    }
}
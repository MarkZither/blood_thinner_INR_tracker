@page "/dashboard"
@using BloodThinnerTracker.Shared.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISnackbar Snackbar
@rendermode InteractiveServer

<PageTitle>Medical Dashboard - Blood Thinner Tracker</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            <!-- Medical Disclaimer Banner -->
            <MudAlert Severity="Severity.Warning" Variant="Variant.Filled" Class="mb-4">
                <MudStack Row="true" AlignItems="AlignItems.Start" Spacing="2">
                    <MudIcon Icon="@Icons.Material.Filled.Warning" Size="Size.Medium" />
                    <div>
                        <strong>Medical Disclaimer:</strong> This application is for informational purposes only and should not replace professional medical advice.
                        Always consult your healthcare provider for medical decisions regarding blood thinner medications.
                    </div>
                </MudStack>
            </MudAlert>

            <!-- Header Section -->
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudStack Spacing="1">
                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                        <MudIcon Icon="@Icons.Material.Filled.Dashboard" Color="Color.Primary" Size="Size.Large" />
                        <MudText Typo="Typo.h4">Medical Dashboard</MudText>
                    </MudStack>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">Monitor your blood thinner medications and INR levels</MudText>
                </MudStack>
                <MudStack Spacing="1" AlignItems="AlignItems.End">
                    <MudChip T="string" Icon="@Icons.Material.Filled.CloudDone" Color="@GetSyncStatusColor()">
                        @GetSyncStatusText()
                    </MudChip>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">Last sync: @lastSyncTime.ToString("MMM dd, HH:mm")</MudText>
                </MudStack>
            </MudStack>

            <!-- Quick Stats Cards -->
            <MudGrid Class="mb-4">
                <MudItem xs="12" sm="6" lg="3">
                    <MudCard Elevation="2">
                        <MudCardContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                <MudAvatar Color="Color.Primary" Size="Size.Large">
                                    <MudIcon Icon="@Icons.Material.Filled.Medication" Size="Size.Medium" />
                                </MudAvatar>
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.h5">@activeMedicationsCount</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Active Medications</MudText>
                                </MudStack>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" lg="3">
                    <MudCard Elevation="2">
                        <MudCardContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                <MudAvatar Color="Color.Success" Size="Size.Large">
                                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Size="Size.Medium" />
                                </MudAvatar>
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.h5">@todayAdherencePercentage%</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Today's Adherence</MudText>
                                </MudStack>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" lg="3">
                    <MudCard Elevation="2">
                        <MudCardContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                <MudAvatar Color="@GetINRStatusColor()" Size="Size.Large">
                                    <MudIcon Icon="@Icons.Material.Filled.ShowChart" Size="Size.Medium" />
                                </MudAvatar>
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.h5">@(lastINRValue?.ToString("F1") ?? "N/A")</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Latest INR</MudText>
                                </MudStack>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <MudItem xs="12" sm="6" lg="3">
                    <MudCard Elevation="2">
                        <MudCardContent>
                            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                <MudAvatar Color="Color.Warning" Size="Size.Large">
                                    <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Medium" />
                                </MudAvatar>
                                <MudStack Spacing="0">
                                    <MudText Typo="Typo.h5">@upcomingRemindersCount</MudText>
                                    <MudText Typo="Typo.body2" Color="Color.Secondary">Upcoming Reminders</MudText>
                                </MudStack>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>

            <!-- Main Content Grid -->
            <MudGrid>
                <!-- Left Column - Medications & Reminders -->
                <MudItem xs="12" lg="8">
                    <!-- Today's Medications -->
                    <MudCard Elevation="2" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Color="Color.Primary" />
                                    <MudText Typo="Typo.h6">Today's Medications</MudText>
                                </MudStack>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" Size="Size.Small" OnClick="RefreshMedications" />
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Small" OnClick="NavigateToAddMedications">
                                    Add
                                </MudButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (todayMedications?.Any() == true)
                            {
                                <MudStack Spacing="3">
                                    @foreach (var med in todayMedications.OrderBy(m => m.NextDoseTime))
                                    {
                                        <MudPaper Elevation="1" Class="pa-3">
                                            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                                    <MudIcon Icon="@GetMedicationStatusIcon(med)" Color="@GetMedicationStatusIconColor(med)" Size="Size.Medium" />
                                                    <MudStack Spacing="1">
                                                        <MudText Typo="Typo.subtitle1">@med.Name</MudText>
                                                        <MudText Typo="Typo.body2" Color="Color.Secondary">@med.Dosage @med.DosageUnit</MudText>
                                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                                            <MudIcon Icon="@Icons.Material.Filled.AccessTime" Size="Size.Small" Color="Color.Secondary" />
                                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                                @med.NextDoseTime?.ToString("HH:mm")
                                                            </MudText>
                                                        </MudStack>
                                                    </MudStack>
                                                </MudStack>
                                                <div>
                                                    @if (!med.IsTaken)
                                                    {
                                                        <MudButton StartIcon="@Icons.Material.Filled.Check" Color="Color.Success" Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => NavigateToLogDose(med.Id))">
                                                            Log Dose
                                                        </MudButton>
                                                    }
                                                    else
                                                    {
                                                        <MudChip T="string" Icon="@Icons.Material.Filled.Check" Color="Color.Success">Completed</MudChip>
                                                    }
                                                </div>
                                            </MudStack>
                                        </MudPaper>
                                    }
                                </MudStack>
                            }
                            else
                            {
                                <MudStack AlignItems="AlignItems.Center" Spacing="3" Class="py-6">
                                    <MudIcon Icon="@Icons.Material.Filled.Medication" Size="Size.Large" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body1" Color="Color.Secondary">No medications scheduled for today</MudText>
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" OnClick="NavigateToAddMedications">
                                        Add Your First Medication
                                    </MudButton>
                                </MudStack>
                            }
                        </MudCardContent>
                    </MudCard>

                    <!-- INR Trend Chart -->
                    <MudCard Elevation="2">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.ShowChart" Color="Color.Primary" />
                                    <MudText Typo="Typo.h6">INR Trend (Last 30 Days)</MudText>
                                </MudStack>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Outlined" Size="Size.Small" OnClick="NavigateToAddINR">
                                    Add Result
                                </MudButton>
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (recentINRTests?.Any() == true)
                            {
                                <MudChart ChartType="ChartType.Line"
                                          ChartSeries="@inrChartSeries"
                                          XAxisLabels="@inrChartLabels"
                                          Width="100%"
                                          Height="300px"
                                          ChartOptions="@inrChartOptions">
                                </MudChart>
                            }
                            else
                            {
                                <MudStack AlignItems="AlignItems.Center" Spacing="3" Class="py-6">
                                    <MudIcon Icon="@Icons.Material.Filled.ShowChart" Size="Size.Large" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body1" Color="Color.Secondary">No INR test results recorded</MudText>
                                    <MudButton StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Variant="Variant.Filled" OnClick="NavigateToAddINR">
                                        Add Your First INR Result
                                    </MudButton>
                                </MudStack>
                            }
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Right Column - Alerts & Upcoming -->
                <MudItem xs="12" lg="4">
                    <!-- Critical Alerts -->
                    @if (criticalAlerts?.Any() == true)
                    {
                        <MudCard Elevation="2" Class="mb-4">
                            <MudCardHeader Style="background-color: var(--mud-palette-error); color: white;">
                                <CardHeaderContent>
                                    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                        <MudIcon Icon="@Icons.Material.Filled.Warning" Color="Color.Inherit" />
                                        <MudText Typo="Typo.h6" Color="Color.Inherit">Critical Alerts</MudText>
                                    </MudStack>
                                </CardHeaderContent>
                            </MudCardHeader>
                            <MudCardContent>
                                <MudStack Spacing="2">
                                    @foreach (var alert in criticalAlerts)
                                    {
                                        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.subtitle2">@alert.Type:</MudText>
                                                <MudText Typo="Typo.body2">@alert.Message</MudText>
                                                <MudText Typo="Typo.caption">@alert.CreatedAt.ToString("MMM dd, HH:mm")</MudText>
                                            </MudStack>
                                        </MudAlert>
                                    }
                                </MudStack>
                            </MudCardContent>
                        </MudCard>
                    }

                    <!-- Upcoming Reminders -->
                    <MudCard Elevation="2" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Primary" />
                                    <MudText Typo="Typo.h6">Upcoming Reminders</MudText>
                                </MudStack>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @if (upcomingReminders?.Any() == true)
                            {
                                <MudStack Spacing="3">
                                    @foreach (var reminder in upcomingReminders.Take(5))
                                    {
                                        <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="3">
                                            <MudPaper Elevation="0" Class="pa-2 text-center" Style="min-width: 70px;">
                                                <MudText Typo="Typo.h6">@reminder.ScheduledTime.ToString("HH:mm")</MudText>
                                                <MudText Typo="Typo.caption" Color="Color.Secondary">@reminder.ScheduledTime.ToString("MMM dd")</MudText>
                                            </MudPaper>
                                            <MudStack Spacing="1">
                                                <MudText Typo="Typo.subtitle1">@reminder.Title</MudText>
                                                <MudText Typo="Typo.body2" Color="Color.Secondary">@reminder.Description</MudText>
                                            </MudStack>
                                        </MudStack>
                                    }
                                </MudStack>
                            }
                            else
                            {
                                <MudStack AlignItems="AlignItems.Center" Spacing="2" Class="py-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Notifications" Size="Size.Large" Color="Color.Secondary" />
                                    <MudText Typo="Typo.body1" Color="Color.Secondary">No upcoming reminders</MudText>
                                </MudStack>
                            }
                        </MudCardContent>
                    </MudCard>

                    <!-- Quick Actions -->
                    <MudCard Elevation="2">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Bolt" Color="Color.Primary" />
                                    <MudText Typo="Typo.h6">Quick Actions</MudText>
                                </MudStack>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudStack Spacing="2">
                                <MudButton StartIcon="@Icons.Material.Filled.ShowChart" Color="Color.Success" Variant="Variant.Filled" FullWidth="true" OnClick="NavigateToAddINR">
                                    Record INR Test
                                </MudButton>
                                <MudButton StartIcon="@Icons.Material.Filled.List" Color="Color.Info" Variant="Variant.Filled" FullWidth="true" OnClick="NavigateToMedications">
                                    View All Medications
                                </MudButton>
                                <MudButton StartIcon="@Icons.Material.Filled.History" Color="Color.Warning" Variant="Variant.Filled" FullWidth="true" OnClick="NavigateToINR">
                                    INR History
                                </MudButton>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </Authorized>
    <Authorizing>
        <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    </Authorizing>
    <NotAuthorized>
        @{
            var returnUrl = Uri.EscapeDataString(Navigation.Uri);
            Navigation.NavigateTo($"/login?returnUrl={returnUrl}", forceLoad: true);
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    // Data properties
    private int activeMedicationsCount = 0;
    private int todayAdherencePercentage = 0;
    private decimal? lastINRValue = null;
    private int upcomingRemindersCount = 0;
    private DateTime lastSyncTime = DateTime.Now;

    private List<TodayMedicationViewModel>? todayMedications;
    private List<INRTest>? recentINRTests;
    private List<AlertViewModel>? criticalAlerts;
    private List<ReminderViewModel>? upcomingReminders;

    // Chart properties
    private List<ChartSeries> inrChartSeries = new();
    private string[] inrChartLabels = Array.Empty<string>();
    private ChartOptions inrChartOptions = new ChartOptions();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
        PrepareINRChartData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load medications from API
            var medications = await Http.GetFromJsonAsync<List<Medication>>("api/medications?includeInactive=false");
            if (medications != null)
            {
                activeMedicationsCount = medications.Count;

                // Map to today's medications view model
                todayMedications = medications.Select(m => new TodayMedicationViewModel
                {
                    Id = m.Id,
                    Name = m.Name,
                    Dosage = (int)m.Dosage,
                    DosageUnit = m.DosageUnit,
                    NextDoseTime = DateTime.Today.AddHours(8), // TODO: Calculate from schedule
                    IsTaken = false // TODO: Check from medication logs
                }).ToList();
            }

            // Load recent INR tests from API
            var inrTests = await Http.GetFromJsonAsync<List<INRTestResponse>>("api/v1/inr/tests?take=5");
            if (inrTests != null && inrTests.Any())
            {
                recentINRTests = inrTests.Select(r => new INRTest
                {
                    Id = r.Id,
                    INRValue = r.INRValue,
                    TestDate = r.TestDate,
                    Status = r.Status,
                    Laboratory = r.Laboratory
                }).ToList();

                lastINRValue = inrTests.First().INRValue;
            }

            // Calculate adherence percentage (mock for now - will be real once logs are implemented)
            todayAdherencePercentage = 85;
            upcomingRemindersCount = 2;

            // Mock alerts and reminders (will be replaced with real data)
            criticalAlerts = new List<AlertViewModel>
            {
                new() { Type = "Missed Dose", Message = "You missed your Warfarin dose yesterday evening", CreatedAt = DateTime.Now.AddHours(-2) }
            };

            upcomingReminders = new List<ReminderViewModel>
            {
                new() { Title = "Warfarin Dose", Description = "5mg - Take with food", ScheduledTime = DateTime.Today.AddHours(20) },
                new() { Title = "INR Test", Description = "Scheduled lab appointment", ScheduledTime = DateTime.Today.AddDays(2).AddHours(9) }
            };
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Network error loading dashboard: {ex.Message}", Severity.Error);
            // Set default values on error
            activeMedicationsCount = 0;
            todayAdherencePercentage = 0;
            lastINRValue = null;
            upcomingRemindersCount = 0;
            todayMedications = new List<TodayMedicationViewModel>();
            criticalAlerts = new List<AlertViewModel>();
            upcomingReminders = new List<ReminderViewModel>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading dashboard: {ex.Message}", Severity.Error);
        }
    }

    private void PrepareINRChartData()
    {
        if (recentINRTests?.Any() != true)
        {
            inrChartSeries = new List<ChartSeries>();
            inrChartLabels = Array.Empty<string>();
            return;
        }

        var orderedTests = recentINRTests.OrderBy(t => t.TestDate).ToList();
        inrChartLabels = orderedTests.Select(t => t.TestDate.ToString("MMM dd")).ToArray();

        var inrValues = orderedTests.Select(t => (double)t.INRValue).ToArray();
        var targetMin = Enumerable.Repeat(2.0, orderedTests.Count).ToArray();
        var targetMax = Enumerable.Repeat(3.0, orderedTests.Count).ToArray();

        inrChartSeries = new List<ChartSeries>
        {
            new ChartSeries { Name = "INR Value", Data = inrValues },
            new ChartSeries { Name = "Target Min (2.0)", Data = targetMin },
            new ChartSeries { Name = "Target Max (3.0)", Data = targetMax }
        };

        inrChartOptions = new ChartOptions
        {
            YAxisTicks = 1,
            YAxisLines = true,
            MaxNumYAxisTicks = 6
        };
    }

    private async Task RefreshMedications()
    {
        // Refresh medication data
        await LoadDashboardData();
        StateHasChanged();
    }

    private async Task MarkMedicationTaken(string medicationId)
    {
        var medication = todayMedications?.FirstOrDefault(m => m.Id == medicationId);
        if (medication != null)
        {
            medication.IsTaken = true;
            // TODO: Call API to log medication
            StateHasChanged();
        }
    }

    // Navigation methods
    private void NavigateToAddMedications() => Navigation.NavigateTo("/medications/add");
    private void NavigateToAddINR() => Navigation.NavigateTo("/inr/add");
    private void NavigateToLogDose(string medicationId) => Navigation.NavigateTo($"/medications/{medicationId}/log");
    private void NavigateToMedications() => Navigation.NavigateTo("/medications");
    private void NavigateToINR() => Navigation.NavigateTo("/inr");

    // Helper methods for styling
    private Color GetSyncStatusColor() => Color.Success;
    private string GetSyncStatusText() => "Synced";

    private Color GetINRStatusColor()
    {
        if (lastINRValue == null) return Color.Secondary;
        return lastINRValue >= 2.0m && lastINRValue <= 3.0m ? Color.Success : Color.Warning;
    }

    private string GetMedicationStatusIcon(TodayMedicationViewModel med)
    {
        return med.IsTaken ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Schedule;
    }

    private Color GetMedicationStatusIconColor(TodayMedicationViewModel med)
    {
        return med.IsTaken ? Color.Success : Color.Warning;
    }

    // View models
    public class TodayMedicationViewModel
    {
        public string Id { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        public decimal Dosage { get; set; }
        public string DosageUnit { get; set; } = string.Empty;
        public DateTime? NextDoseTime { get; set; }
        public bool IsTaken { get; set; }
    }

    public class AlertViewModel
    {
        public string Type { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }

    public class ReminderViewModel
    {
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime ScheduledTime { get; set; }
    }
}

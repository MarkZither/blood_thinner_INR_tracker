@page "/medications"
@using BloodThinnerTracker.Shared.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@attribute [Authorize]
@inject NavigationManager Navigation
@inject HttpClient Http
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@rendermode InteractiveServer

<PageTitle>Medications - Blood Thinner Tracker</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
            <!-- Medical Disclaimer -->
            <MudAlert Severity="Severity.Info" Variant="Variant.Filled" Class="mb-4">
                <MudText Typo="Typo.body1">
                    <strong>Important:</strong> Always consult your healthcare provider before making changes to your medication regimen.
                    This tool is for tracking purposes only and should not replace professional medical advice.
                </MudText>
            </MudAlert>

            <!-- Header -->
            <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
                <MudStack Spacing="1">
                    <MudText Typo="Typo.h4" Color="Color.Primary">
                        <MudIcon Icon="@Icons.Material.Filled.Medication" Class="mr-2" />
                        My Medications
                    </MudText>
                    <MudText Typo="Typo.body2" Color="Color.Secondary">
                        Manage your blood thinner medications and schedules
                    </MudText>
                </MudStack>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           StartIcon="@Icons.Material.Filled.Add"
                           OnClick="NavigateToAddMedications">
                    Add Medication
                </MudButton>
            </MudStack>

            <!-- Filter and Search -->
            <MudPaper Elevation="2" Class="pa-4 mb-4">
                <MudGrid Spacing="3">
                    <MudItem xs="12" sm="6" md="4">
                        <MudTextField @bind-Value="searchTerm"
                                      Label="Search Medications"
                                      Placeholder="Search by name or type..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      Immediate="true"
                                      DebounceInterval="300"
                                      Variant="Variant.Outlined" />
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudSelect @bind-Value="statusFilter"
                                   Label="Filter by Status"
                                   Variant="Variant.Outlined"
                                   T="string">
                            <MudSelectItem Value="@("all")">All Medications</MudSelectItem>
                            <MudSelectItem Value="@("active")">Active Only</MudSelectItem>
                            <MudSelectItem Value="@("inactive")">Inactive Only</MudSelectItem>
                            <MudSelectItem Value="@("blood-thinners")">Blood Thinners Only</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="3">
                        <MudSelect @bind-Value="sortBy"
                                   Label="Sort by"
                                   Variant="Variant.Outlined"
                                   T="string">
                            <MudSelectItem Value="@("name")">Name</MudSelectItem>
                            <MudSelectItem Value="@("date")">Date Added</MudSelectItem>
                            <MudSelectItem Value="@("frequency")">Frequency</MudSelectItem>
                            <MudSelectItem Value="@("type")">Type</MudSelectItem>
                        </MudSelect>
                    </MudItem>
                    <MudItem xs="12" sm="6" md="2">
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Default"
                                   FullWidth="true"
                                   StartIcon="@Icons.Material.Filled.Clear"
                                   OnClick="ClearFilters"
                                   Style="height: 56px;">
                            Clear
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>

            <!-- Medications List -->
            @if (filteredMedications?.Any() == true)
            {
                <MudGrid Spacing="3">
                    @foreach (var medication in filteredMedications)
                    {
                        <MudItem xs="12" md="6" lg="4">
                            <MudCard Elevation="2" Class="@($"h-100 {(medication.IsActive ? "border-success" : "border-secondary")}")">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">@medication.Name</MudText>
                                        @if (!string.IsNullOrEmpty(medication.BrandName))
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@medication.BrandName</MudText>
                                        }
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Size="Size.Small">
                                            <MudMenuItem OnClick="() => EditMedication(medication.Id)" Icon="@Icons.Material.Filled.Edit">Edit</MudMenuItem>
                                            <MudMenuItem OnClick="() => ViewHistory(medication.Id)" Icon="@Icons.Material.Filled.History">View History</MudMenuItem>
                                            <MudDivider />
                                            <MudMenuItem OnClick="() => DeactivateMedication(medication.Id)" Icon="@Icons.Material.Filled.Pause" IconColor="Color.Error">
                                                <MudText Color="Color.Error">Deactivate</MudText>
                                            </MudMenuItem>
                                        </MudMenu>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    <!-- Medication Details -->
                                    <MudGrid Spacing="2" Class="mb-4">
                                        <MudItem xs="4" Class="text-center">
                                            <MudText Typo="Typo.body1"><strong>@medication.Dosage</strong></MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">@medication.DosageUnit</MudText>
                                        </MudItem>
                                        <MudItem xs="4" Class="text-center">
                                            <MudText Typo="Typo.body1"><strong>@GetFrequencyDisplay(medication.Frequency)</strong></MudText>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Frequency</MudText>
                                        </MudItem>
                                        <MudItem xs="4" Class="text-center">
                                            <MudChip T="string" Size="Size.Small" Color="@GetMedicationTypeColor(medication.Type)">@medication.Type.ToString()</MudChip>
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">Type</MudText>
                                        </MudItem>
                                    </MudGrid>

                                    <!-- Schedule -->
                                    @if (!string.IsNullOrEmpty(medication.ScheduledTimes))
                                    {
                                        <MudStack Spacing="1" Class="mb-3">
                                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.Schedule" Size="Size.Small" /> Schedule
                                            </MudText>
                                            <MudStack Row="true" Spacing="1">
                                                @foreach (var time in GetScheduledTimes(medication.ScheduledTimes))
                                                {
                                                    <MudChip T="string" Size="Size.Small" Variant="Variant.Outlined">@time</MudChip>
                                                }
                                            </MudStack>
                                        </MudStack>
                                    }

                                    <!-- Special Warnings for Blood Thinners -->
                                    @if (medication.Type == MedicationType.Warfarin)
                                    {
                                        <MudAlert Severity="Severity.Warning" Dense="true" Class="mb-3">
                                            <MudText Typo="Typo.caption">
                                                <strong>Warfarin:</strong> Requires regular INR monitoring
                                            </MudText>
                                        </MudAlert>
                                    }

                                    <!-- Instructions -->
                                    @if (!string.IsNullOrEmpty(medication.Instructions))
                                    {
                                        <MudStack Spacing="1" Class="mb-3">
                                            <MudText Typo="Typo.subtitle2" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" /> Instructions
                                            </MudText>
                                            <MudText Typo="Typo.body2" Color="Color.Secondary">@medication.Instructions</MudText>
                                        </MudStack>
                                    }

                                    <!-- Status and Actions -->
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                        <MudStack Row="true" Spacing="1">
                                            <MudChip T="string" Size="Size.Small" Color="@(medication.IsActive ? Color.Success : Color.Default)">
                                                @(medication.IsActive ? "Active" : "Inactive")
                                            </MudChip>
                                            @if (medication.RemindersEnabled)
                                            {
                                                <MudChip T="string" Size="Size.Small" Color="Color.Info" Icon="@Icons.Material.Filled.NotificationsActive">
                                                    Reminders
                                                </MudChip>
                                            }
                                        </MudStack>
                                        <MudButton Variant="Variant.Filled"
                                                   Color="Color.Primary"
                                                   Size="Size.Small"
                                                   StartIcon="@Icons.Material.Filled.Add"
                                                   OnClick="() => LogDose(medication.Id)">
                                            Log Dose
                                        </MudButton>
                                    </MudStack>
                                </MudCardContent>
                                <MudCardActions Class="pa-3" Style="background-color: var(--mud-palette-background-grey);">
                                    <MudStack Row="true" Justify="Justify.SpaceBetween" Style="width: 100%;">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            <MudIcon Icon="@Icons.Material.Filled.CalendarToday" Size="Size.Small" />
                                            Started: @medication.StartDate.ToString("MMM dd, yyyy")
                                        </MudText>
                                        @if (medication.EndDate.HasValue)
                                        {
                                            <MudText Typo="Typo.caption" Color="Color.Secondary">
                                                <MudIcon Icon="@Icons.Material.Filled.EventBusy" Size="Size.Small" />
                                                Ends: @medication.EndDate.Value.ToString("MMM dd, yyyy")
                                            </MudText>
                                        }
                                    </MudStack>
                                </MudCardActions>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>

                <!-- Pagination -->
                @if (totalPages > 1)
                {
                    <MudPagination Class="mt-4"
                                   Count="@totalPages"
                                   Selected="@currentPage"
                                   SelectedChanged="@((int page) => ChangePage(page))"
                                   BoundaryCount="1"
                                   MiddleCount="3"
                                   ShowFirstButton="true"
                                   ShowLastButton="true" />
                }
            }
            else
            {
                <!-- Empty State -->
                <MudPaper Elevation="2" Class="pa-8 text-center">
                    <MudIcon Icon="@Icons.Material.Filled.Medication" Size="Size.Large" Color="Color.Secondary" Style="font-size: 4rem;" Class="mb-4" />
                    <MudText Typo="Typo.h5" Color="Color.Secondary" Class="mb-2">No Medications Found</MudText>
                    @if (string.IsNullOrEmpty(searchTerm) && statusFilter == "all")
                    {
                        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                            Get started by adding your first medication
                        </MudText>
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   OnClick="NavigateToAddMedications">
                            Add Your First Medication
                        </MudButton>
                    }
                    else
                    {
                        <MudText Typo="Typo.body1" Color="Color.Secondary" Class="mb-4">
                            Try adjusting your search or filter criteria
                        </MudText>
                        <MudButton Variant="Variant.Outlined"
                                   Color="Color.Default"
                                   StartIcon="@Icons.Material.Filled.Clear"
                                   OnClick="ClearFilters">
                            Clear Filters
                        </MudButton>
                    }
                </MudPaper>
            }
        </MudContainer>
    </Authorized>
    <Authorizing>
        <div class="d-flex justify-content-center align-items-center" style="min-height: 400px;">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        </div>
    </Authorizing>
    <NotAuthorized>
        @{
            var returnUrl = Uri.EscapeDataString(Navigation.Uri);
            Navigation.NavigateTo($"/login?returnUrl={returnUrl}", forceLoad: true);
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    // Filter and search properties with reactive setters
    private string _searchTerm = string.Empty;
    private string searchTerm
    {
        get => _searchTerm;
        set
        {
            if (_searchTerm != value)
            {
                _searchTerm = value;
                currentPage = 1;
                ApplyFilters();
            }
        }
    }

    private string _statusFilter = "all";
    private string statusFilter
    {
        get => _statusFilter;
        set
        {
            if (_statusFilter != value)
            {
                _statusFilter = value;
                currentPage = 1;
                ApplyFilters();
            }
        }
    }

    private string _sortBy = "name";
    private string sortBy
    {
        get => _sortBy;
        set
        {
            if (_sortBy != value)
            {
                _sortBy = value;
                ApplyFilters();
            }
        }
    }

    private int currentPage = 1;
    private int pageSize = 12;
    private int totalPages = 1;

    // Data properties
    private List<Medication>? allMedications;
    private List<Medication>? filteredMedications;

    protected override async Task OnInitializedAsync()
    {
        await LoadMedications();
        ApplyFilters();
    }

    private async Task LoadMedications()
    {
        try
        {
            // Load all medications from API (including inactive for filtering)
            var medications = await Http.GetFromJsonAsync<List<Medication>>("api/medications?includeInactive=true");

            if (medications != null)
            {
                allMedications = medications;
                Snackbar.Add($"Loaded {medications.Count} medications", Severity.Success);
            }
            else
            {
                allMedications = new List<Medication>();
                Snackbar.Add("No medications found", Severity.Info);
            }
        }
        catch (HttpRequestException ex)
        {
            Snackbar.Add($"Network error loading medications: {ex.Message}", Severity.Error);
            allMedications = new List<Medication>();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading medications: {ex.Message}", Severity.Error);
            allMedications = new List<Medication>();
        }
    }

    private void ApplyFilters()
    {
        if (allMedications == null)
        {
            filteredMedications = new List<Medication>();
            return;
        }

        var query = allMedications.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            query = query.Where(m =>
                m.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                (m.BrandName != null && m.BrandName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) ||
                m.Type.ToString().Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        // Apply status filter
        query = statusFilter switch
        {
            "active" => query.Where(m => m.IsActive),
            "inactive" => query.Where(m => !m.IsActive),
            "blood-thinners" => query.Where(m => m.Type == MedicationType.Warfarin || m.Type == MedicationType.DOAC || m.Type == MedicationType.Heparin || m.Type == MedicationType.LMWH),
            _ => query
        };

        // Apply sorting
        query = sortBy switch
        {
            "date" => query.OrderByDescending(m => m.CreatedAt),
            "frequency" => query.OrderBy(m => m.Frequency),
            "type" => query.OrderBy(m => m.Type),
            _ => query.OrderBy(m => m.Name)
        };

        var allFiltered = query.ToList();
        totalPages = (int)Math.Ceiling((double)allFiltered.Count / pageSize);

        filteredMedications = allFiltered
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        statusFilter = "all";
        sortBy = "name";
        currentPage = 1;
        // ApplyFilters() will be called by the setters
        StateHasChanged();
    }

    private void ChangePage(int page)
    {
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            ApplyFilters();
            StateHasChanged();
        }
    }

    // Navigation methods
    private void NavigateToAddMedications() => Navigation.NavigateTo("/medications/add");

    private void EditMedication(string medicationId)
    {
        Navigation.NavigateTo($"/medications/edit/{medicationId}");
    }

    private void ViewHistory(string medicationId)
    {
        Navigation.NavigateTo($"/medications/{medicationId}/history");
    }

    private void LogDose(string medicationId)
    {
        Navigation.NavigateTo($"/medications/{medicationId}/log");
    }

    private async Task DeactivateMedication(string medicationId)
    {
        var parameters = new DialogParameters
        {
            { "Content", "Are you sure you want to deactivate this medication?" },
            { "SubmitButtonText", "Deactivate" },
            { "CancelButtonText", "Cancel" }
        };

        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small };
        var dialog = await DialogService.ShowMessageBox("Confirm Deactivation", "Are you sure you want to deactivate this medication?", "Deactivate", "Cancel");

        if (dialog == true)
        {
            // TODO: Call API to deactivate medication
            await LoadMedications();
            ApplyFilters();
            StateHasChanged();
            Snackbar.Add("Medication deactivated successfully", Severity.Success);
        }
    }

    // Helper methods
    private Color GetMedicationTypeColor(MedicationType type)
    {
        return type switch
        {
            MedicationType.Warfarin => Color.Error,
            MedicationType.DOAC => Color.Warning,
            MedicationType.Heparin => Color.Info,
            MedicationType.LMWH => Color.Info,
            MedicationType.Antiplatelet => Color.Secondary,
            _ => Color.Default
        };
    }

    private string GetFrequencyDisplay(MedicationFrequency frequency)
    {
        return frequency switch
        {
            MedicationFrequency.OnceDaily => "1x/day",
            MedicationFrequency.TwiceDaily => "2x/day",
            MedicationFrequency.ThreeTimesDaily => "3x/day",
            MedicationFrequency.FourTimesDaily => "4x/day",
            MedicationFrequency.EveryOtherDay => "Every other day",
            MedicationFrequency.Weekly => "Weekly",
            MedicationFrequency.AsNeeded => "As needed",
            _ => "Custom"
        };
    }

    private List<string> GetScheduledTimes(string scheduledTimesJson)
    {
        try
        {
            var times = System.Text.Json.JsonSerializer.Deserialize<string[]>(scheduledTimesJson);
            return times?.ToList() ?? new List<string>();
        }
        catch
        {
            return new List<string>();
        }
    }
}

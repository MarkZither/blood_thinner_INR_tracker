name: 🩸 Blood Thinner Tracker - CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'release/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '10.0.x'
  DOTNET_PREVIEW: true
  NODE_VERSION: '20.x'
  SOLUTION_FILE: 'BloodThinnerTracker.sln'
  BUILD_CONFIGURATION: 'Release'

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: ${{ env.DOTNET_PREVIEW }}

    - name: 📋 Display .NET info
      run: dotnet --info

    - name: 📦 Restore dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE }}

    - name: 🔨 Build solution
      run: dotnet build ${{ env.SOLUTION_FILE }} --no-restore --configuration ${{ env.BUILD_CONFIGURATION }}

    - name: 🧪 Run tests
      run: |
        dotnet test ${{ env.SOLUTION_FILE }} \
          --no-build \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --logger trx \
          --results-directory TestResults \
          --collect:"XPlat Code Coverage" \
          --verbosity normal

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: TestResults/

    - name: 📈 Upload coverage reports
      uses: codecov/codecov-action@v3
      if: always()
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: TestResults/*/coverage.cobertura.xml
        fail_ci_if_error: false

  # Job 2: Security Scan
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 20

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: ${{ env.DOTNET_PREVIEW }}

    - name: 🔍 Run .NET Security Scan
      run: |
        dotnet list package --vulnerable --include-transitive
        dotnet list package --deprecated

    - name: 🛡️ Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: csharp

    - name: 🔨 Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: 🔍 Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: 🔐 Run Snyk Security Scan
      uses: snyk/actions/dotnet@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Job 3: Code Quality
  code-quality:
    name: 📝 Code Quality
    runs-on: ubuntu-latest
    needs: build-and-test
    timeout-minutes: 15

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: ${{ env.DOTNET_PREVIEW }}

    - name: 📊 SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

    - name: 📋 Run StyleCop Analysis
      run: |
        dotnet build ${{ env.SOLUTION_FILE }} \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --verbosity normal \
          /p:TreatWarningsAsErrors=false

  # Job 4: Package & Publish Artifacts
  package:
    name: 📦 Package Applications
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    timeout-minutes: 20

    strategy:
      matrix:
        project: 
          - { name: 'Api', path: 'src/BloodThinnerTracker.Api', runtime: 'linux-x64' }
          - { name: 'Web', path: 'src/BloodThinnerTracker.Web', runtime: 'linux-x64' }
          - { name: 'Cli', path: 'src/BloodThinnerTracker.Cli', runtime: 'win-x64' }
          - { name: 'Cli', path: 'src/BloodThinnerTracker.Cli', runtime: 'linux-x64' }
          - { name: 'Cli', path: 'src/BloodThinnerTracker.Cli', runtime: 'osx-x64' }
          - { name: 'Mcp', path: 'src/BloodThinnerTracker.Mcp', runtime: 'linux-x64' }

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: ${{ env.DOTNET_PREVIEW }}

    - name: 📦 Publish ${{ matrix.project.name }} (${{ matrix.project.runtime }})
      run: |
        dotnet publish ${{ matrix.project.path }} \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --runtime ${{ matrix.project.runtime }} \
          --self-contained true \
          --output ./publish/${{ matrix.project.name }}-${{ matrix.project.runtime }} \
          /p:PublishSingleFile=true \
          /p:IncludeNativeLibrariesForSelfExtract=true

    - name: 📁 Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.project.name }}-${{ matrix.project.runtime }}
        path: ./publish/${{ matrix.project.name }}-${{ matrix.project.runtime }}/
        retention-days: 30

  # Job 5: Docker Build & Push
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    timeout-minutes: 30

    strategy:
      matrix:
        service: ['api', 'web', 'apphost']

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🔑 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          bloodtracker/${{ matrix.service }}
          ghcr.io/${{ github.repository }}/${{ matrix.service }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/BloodThinnerTracker.${{ matrix.service }}/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Job 6: Deploy to Development
  deploy-dev:
    name: 🚀 Deploy to Development
    runs-on: ubuntu-latest
    needs: [package, docker]
    if: github.ref == 'refs/heads/develop'
    environment: development
    timeout-minutes: 15

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🔑 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}

    - name: 🎯 Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AZURE_RG_DEV }}
        cluster-name: ${{ secrets.AZURE_AKS_DEV }}

    - name: 🚀 Deploy to AKS Development
      run: |
        kubectl apply -f k8s/dev/
        kubectl set image deployment/bloodtracker-api api=ghcr.io/${{ github.repository }}/api:develop
        kubectl set image deployment/bloodtracker-web web=ghcr.io/${{ github.repository }}/web:develop
        kubectl rollout status deployment/bloodtracker-api
        kubectl rollout status deployment/bloodtracker-web

    - name: 🌐 Get service URLs
      run: |
        echo "API URL: $(kubectl get service bloodtracker-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
        echo "Web URL: $(kubectl get service bloodtracker-web-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"

  # Job 7: Deploy to Production
  deploy-prod:
    name: 🎯 Deploy to Production
    runs-on: ubuntu-latest
    needs: [package, docker]
    if: github.ref == 'refs/heads/main'
    environment: production
    timeout-minutes: 20

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: 🔑 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}

    - name: 🎯 Set AKS context
      uses: azure/aks-set-context@v3
      with:
        resource-group: ${{ secrets.AZURE_RG_PROD }}
        cluster-name: ${{ secrets.AZURE_AKS_PROD }}

    - name: 🚀 Deploy to AKS Production
      run: |
        kubectl apply -f k8s/prod/
        kubectl set image deployment/bloodtracker-api api=ghcr.io/${{ github.repository }}/api:latest
        kubectl set image deployment/bloodtracker-web web=ghcr.io/${{ github.repository }}/web:latest
        kubectl rollout status deployment/bloodtracker-api
        kubectl rollout status deployment/bloodtracker-web

    - name: ✅ Deployment verification
      run: |
        kubectl get pods -l app=bloodtracker-api
        kubectl get pods -l app=bloodtracker-web
        kubectl get services

  # Job 8: Publish CLI Tool to NuGet
  publish-cli:
    name: 📤 Publish CLI Tool
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[publish-cli]')
    timeout-minutes: 10

    steps:
    - name: 🛎️ Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        include-prerelease: ${{ env.DOTNET_PREVIEW }}

    - name: 📦 Pack CLI tool
      run: |
        dotnet pack src/BloodThinnerTracker.Cli \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --output ./nupkg \
          /p:PackageVersion=1.0.${{ github.run_number }}

    - name: 📤 Push to NuGet
      run: |
        dotnet nuget push ./nupkg/*.nupkg \
          --api-key ${{ secrets.NUGET_API_KEY }} \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

  # Job 9: Notification
  notify:
    name: 📢 Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-dev, deploy-prod, publish-cli]
    if: always()
    timeout-minutes: 5

    steps:
    - name: 📧 Send Slack notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#bloodtracker-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: 📨 Send Teams notification
      uses: aliencube/microsoft-teams-actions@v0.8.0
      with:
        webhook_uri: ${{ secrets.TEAMS_WEBHOOK }}
        title: "🩸 Blood Thinner Tracker Deployment"
        summary: "Deployment completed for commit ${{ github.sha }}"
        theme_color: ${{ job.status == 'success' && 'good' || 'danger' }}
        sections: |
          [
            {
              "activityTitle": "Deployment Status: ${{ job.status }}",
              "activitySubtitle": "Branch: ${{ github.ref }}",
              "activityImage": "https://github.com/identicons/${{ github.actor }}.png",
              "facts": [
                {
                  "name": "Repository",
                  "value": "${{ github.repository }}"
                },
                {
                  "name": "Commit",
                  "value": "${{ github.sha }}"
                },
                {
                  "name": "Author",
                  "value": "${{ github.actor }}"
                }
              ]
            }
          ]